name: GLTF Validator

on:
  pull_request:
    paths:
      - '**.gltf'
      - '**.glb'
      - 'tools/gltf-validator/**'

# Add permissions block
permissions:
  pull-requests: write  # Required to create/update comments
  contents: read       # Required to read repository contents
  packages: write

jobs:
  validate-gltf:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Find changed GLTF files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: |
            **.gltf
            **.glb

      - name: Build and cache Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./tools/gltf-validator
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/gltf-validator:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create output directory
        run: mkdir -p gltf-validation-results

      - name: Run GLTF validator
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          while IFS= read -r gltf_file; do
            if [ -f "$gltf_file" ]; then
              echo "Processing $gltf_file"
              docker run --rm \
                -v "$(pwd):/workspace" \
                -w /workspace \
                ghcr.io/${{ github.repository_owner }}/gltf-validator:latest \
                python /app/validate_gltf.py "$gltf_file" "/workspace/gltf-validation-results"
            fi
          done < gltf_files.txt

      - name: Upload validation results
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: gltf-validation-results
          path: gltf-validation-results/
          retention-days: 1

      - name: Create or update PR comment
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read the validation results
            const resultsDir = 'gltf-validation-results';
            const results = {};
            
            if (fs.existsSync(resultsDir)) {
              const files = fs.readdirSync(resultsDir);
              for (const file of files) {
                if (file.endsWith('.json')) {
                  const content = JSON.parse(fs.readFileSync(path.join(resultsDir, file), 'utf8'));
                  results[file.replace('.json', '')] = content;
                }
              }
            }
            
            // Generate comment content
            let comment = '## GLTF Validation Results\n\n';
            
            if (Object.keys(results).length === 0) {
              comment += 'No GLTF files were processed.\n';
            } else {
              for (const [filename, result] of Object.entries(results)) {
                comment += `### ${filename}\n\n`;
                
                if (result.success) {
                  comment += '✅ Validation successful\n\n';
                  if (result.report) {
                    comment += '#### Validation Report\n';
                    comment += '```\n';
                    comment += result.report;
                    comment += '\n```\n\n';
                  }
                } else {
                  comment += '❌ Validation failed\n\n';
                  if (result.error) {
                    comment += '#### Error Details\n';
                    comment += '```\n';
                    comment += result.error;
                    comment += '\n```\n\n';
                  }
                }
                
                if (result.images && result.images.length > 0) {
                  comment += '#### Preview Images\n';
                  for (const image of result.images) {
                    const imagePath = path.join(resultsDir, image);
                    if (fs.existsSync(imagePath)) {
                      const imageData = fs.readFileSync(imagePath);
                      const base64Image = imageData.toString('base64');
                      comment += `![${image}](data:image/png;base64,${base64Image})\n\n`;
                    }
                  }
                }
              }
            }
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const existingComment = comments.find(c => c.body.startsWith('## GLTF Validation Results'));
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            } 